// Created on 08-11-2010, 08:46:58 PM
package cl.jreloj;

import cl.jreloj.audio.AudioFile;
import cl.jreloj.audio.AudioHour;
import cl.jreloj.audio.Player;
import cl.jreloj.util.*;

import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

import static java.awt.EventQueue.invokeLater;
import static javax.swing.UIManager.getSystemLookAndFeelClassName;
import static javax.swing.UIManager.setLookAndFeel;

public class App extends JFrame {

    private HourThread hourThread = new HourThread();
    private HourBeep hourBeep = new HourBeep();
    private Point point;
    private List<K.Component> components = new ArrayList<>();
    private AppSystemtray appSystemtray;

    public App() {
        initComponents();
        initGuiComponents();
        initThreads();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        themeForm = new javax.swing.JFrame();
        changeColorsPanel = new javax.swing.JPanel();
        backgroundMinuteBarColorLabel = new javax.swing.JLabel();
        windowTitleColorLabel = new javax.swing.JLabel();
        backgroundColorLabel = new javax.swing.JLabel();
        hourLabelColorLabel = new javax.swing.JLabel();
        dateLabelColorLabel = new javax.swing.JLabel();
        backgroundHourBarColorLabel = new javax.swing.JLabel();
        backgroundSecondBarColorLabel = new javax.swing.JLabel();
        osNameColorLabel = new javax.swing.JLabel();
        minuteBarColorLabel = new javax.swing.JLabel();
        hourBarLabelColorLabel = new javax.swing.JLabel();
        secondBarColorLabel = new javax.swing.JLabel();
        windowTitleColorRadio = new javax.swing.JRadioButton();
        backgroundColorRadio = new javax.swing.JRadioButton();
        hourColorRadio = new javax.swing.JRadioButton();
        dateColorRadio = new javax.swing.JRadioButton();
        backgroundHourBarColorRadio = new javax.swing.JRadioButton();
        backgroundMinuteBarColorRadio = new javax.swing.JRadioButton();
        backgroundSecondBarColorRadio = new javax.swing.JRadioButton();
        hourBarColorRadio = new javax.swing.JRadioButton();
        minuteBarColorRadio = new javax.swing.JRadioButton();
        secondBarColorRadio = new javax.swing.JRadioButton();
        osNameColorRadio = new javax.swing.JRadioButton();
        currentColor = new javax.swing.JLabel();
        uncheckAllButton = new javax.swing.JButton();
        colorChooserPanel = new javax.swing.JPanel();
        colorChooser = new javax.swing.JColorChooser();
        applyColorsButton = new javax.swing.JButton();
        reminderFrame = new javax.swing.JFrame();
        addReminderButton = new javax.swing.JButton();
        datetimeReminderPanel = new javax.swing.JPanel();
        hourReminderComboBox = new javax.swing.JComboBox();
        minuteReminderComboBox = new javax.swing.JComboBox();
        secondsReminderComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        reminderMessagePanel = new javax.swing.JPanel();
        reminderMessageScrollPane = new javax.swing.JScrollPane();
        reminderMessageTextArea = new javax.swing.JTextArea();
        logFrame = new javax.swing.JFrame();
        logMessageScrollPane = new javax.swing.JScrollPane();
        logMessageTextArea = new javax.swing.JTextArea();
        stopAlarmSoundButton = new javax.swing.JButton();
        opacityFrame = new javax.swing.JFrame();
        opacityPanel = new javax.swing.JPanel();
        opacityLevelSlider = new javax.swing.JSlider();
        opacityPercentageLabel = new javax.swing.JLabel();
        acceptOpacityButton = new javax.swing.JButton();
        appPanel = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        osNameLabel = new javax.swing.JLabel();
        audioLabel = new javax.swing.JLabel();
        hourLabel = new javax.swing.JLabel();
        hourProgressBar = new javax.swing.JProgressBar();
        secondProgressBar = new javax.swing.JProgressBar();
        minuteProgressBar = new javax.swing.JProgressBar();

        themeForm.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        changeColorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Aplicar Color a"));
        changeColorsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backgroundMinuteBarColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundMinuteBarColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        backgroundMinuteBarColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundMinuteBarColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        backgroundMinuteBarColorLabel.setOpaque(true);
        changeColorsPanel.add(backgroundMinuteBarColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 120, 20));

        windowTitleColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        windowTitleColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        windowTitleColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        windowTitleColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        windowTitleColorLabel.setOpaque(true);
        changeColorsPanel.add(windowTitleColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 120, 20));

        backgroundColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        backgroundColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        backgroundColorLabel.setOpaque(true);
        changeColorsPanel.add(backgroundColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 120, 20));

        hourLabelColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        hourLabelColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        hourLabelColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hourLabelColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        hourLabelColorLabel.setOpaque(true);
        changeColorsPanel.add(hourLabelColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 120, 20));

        dateLabelColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        dateLabelColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        dateLabelColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabelColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dateLabelColorLabel.setOpaque(true);
        changeColorsPanel.add(dateLabelColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 120, 20));

        backgroundHourBarColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundHourBarColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        backgroundHourBarColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundHourBarColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        backgroundHourBarColorLabel.setOpaque(true);
        changeColorsPanel.add(backgroundHourBarColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 120, 20));

        backgroundSecondBarColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundSecondBarColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        backgroundSecondBarColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundSecondBarColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        backgroundSecondBarColorLabel.setOpaque(true);
        changeColorsPanel.add(backgroundSecondBarColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 120, 20));

        osNameColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        osNameColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        osNameColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        osNameColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        osNameColorLabel.setOpaque(true);
        changeColorsPanel.add(osNameColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 120, 20));

        minuteBarColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        minuteBarColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        minuteBarColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minuteBarColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        minuteBarColorLabel.setOpaque(true);
        changeColorsPanel.add(minuteBarColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 120, 20));

        hourBarLabelColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        hourBarLabelColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        hourBarLabelColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hourBarLabelColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        hourBarLabelColorLabel.setOpaque(true);
        changeColorsPanel.add(hourBarLabelColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 120, 20));

        secondBarColorLabel.setBackground(new java.awt.Color(255, 255, 255));
        secondBarColorLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        secondBarColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondBarColorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        secondBarColorLabel.setOpaque(true);
        changeColorsPanel.add(secondBarColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 120, 20));

        windowTitleColorRadio.setText("Título de la Ventana");
        windowTitleColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowTitleColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(windowTitleColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, -1));

        backgroundColorRadio.setText("Fondo");
        backgroundColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(backgroundColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, -1, -1));

        hourColorRadio.setText("Hora");
        hourColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(hourColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, -1, -1));

        dateColorRadio.setText("Fecha");
        dateColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(dateColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, -1, -1));

        backgroundHourBarColorRadio.setText("Fondo Barra Hora");
        backgroundHourBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundHourBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(backgroundHourBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, -1, -1));

        backgroundMinuteBarColorRadio.setText("Fondo Barra Minuto");
        backgroundMinuteBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundMinuteBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(backgroundMinuteBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, -1, -1));

        backgroundSecondBarColorRadio.setText("Fondo Barra Segundo");
        backgroundSecondBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSecondBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(backgroundSecondBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, -1, -1));

        hourBarColorRadio.setText("Barra Hora");
        hourBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(hourBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, -1, -1));

        minuteBarColorRadio.setText("Barra Minuto");
        minuteBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minuteBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(minuteBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, -1, -1));

        secondBarColorRadio.setText("Barra Segundo");
        secondBarColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondBarColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(secondBarColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, -1, -1));

        osNameColorRadio.setText("Título SO Huésped ");
        osNameColorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                osNameColorRadioActionPerformed(evt);
            }
        });
        changeColorsPanel.add(osNameColorRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, -1, -1));

        currentColor.setFont(new java.awt.Font("DejaVu Sans", 3, 11)); // NOI18N
        currentColor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentColor.setText("Color Actual");
        changeColorsPanel.add(currentColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 120, 30));

        uncheckAllButton.setText("Desmarcar Todo");
        uncheckAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uncheckAllButtonActionPerformed(evt);
            }
        });
        changeColorsPanel.add(uncheckAllButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 160, -1));

        themeForm.getContentPane().add(changeColorsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 440));

        colorChooserPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selección de Color"));
        colorChooserPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        colorChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        colorChooserPanel.add(colorChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 440, 380));

        applyColorsButton.setText("Aplicar Colores");
        applyColorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyColorsButtonActionPerformed(evt);
            }
        });
        colorChooserPanel.add(applyColorsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 170, -1));

        themeForm.getContentPane().add(colorChooserPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 470, 440));

        addReminderButton.setText("Agregar Recordatorio");
        addReminderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReminderButtonActionPerformed(evt);
            }
        });
        reminderFrame.getContentPane().add(addReminderButton, java.awt.BorderLayout.PAGE_END);

        datetimeReminderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha y Hora"));
        datetimeReminderPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hourReminderComboBox.setEditable(true);
        hourReminderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"}));
        datetimeReminderPanel.add(hourReminderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 50, -1));

        minuteReminderComboBox.setEditable(true);
        minuteReminderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        datetimeReminderPanel.add(minuteReminderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 50, -1));

        secondsReminderComboBox.setEditable(true);
        secondsReminderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        datetimeReminderPanel.add(secondsReminderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 50, -1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(":");
        datetimeReminderPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 20, 20));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(":");
        datetimeReminderPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 10, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("   Hora      :   Minuto   :  Segundo");
        datetimeReminderPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 200, -1));

        reminderFrame.getContentPane().add(datetimeReminderPanel, java.awt.BorderLayout.CENTER);

        reminderMessagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensaje de Recordatorio"));
        reminderMessagePanel.setLayout(new java.awt.BorderLayout());

        reminderMessageTextArea.setColumns(20);
        reminderMessageTextArea.setLineWrap(true);
        reminderMessageTextArea.setRows(5);
        reminderMessageTextArea.setWrapStyleWord(true);
        reminderMessageScrollPane.setViewportView(reminderMessageTextArea);

        reminderMessagePanel.add(reminderMessageScrollPane, java.awt.BorderLayout.CENTER);

        reminderFrame.getContentPane().add(reminderMessagePanel, java.awt.BorderLayout.LINE_END);

        logMessageTextArea.setEditable(false);
        logMessageTextArea.setColumns(20);
        logMessageTextArea.setRows(5);
        logMessageScrollPane.setViewportView(logMessageTextArea);

        logFrame.getContentPane().add(logMessageScrollPane, java.awt.BorderLayout.CENTER);

        stopAlarmSoundButton.setText("Detener Sonido de Alarma");
        stopAlarmSoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAlarmSoundButtonActionPerformed(evt);
            }
        });
        logFrame.getContentPane().add(stopAlarmSoundButton, java.awt.BorderLayout.PAGE_END);

        opacityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Porcentaje de Opacidad"));
        opacityPanel.setLayout(new java.awt.BorderLayout());

        opacityLevelSlider.setMinimum(1);
        opacityLevelSlider.setPaintLabels(true);
        opacityLevelSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                opacityLevelSliderMouseDragged(evt);
            }
        });
        opacityLevelSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                opacityLevelSliderMousePressed(evt);
            }
        });
        opacityLevelSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                opacityLevelSliderKeyReleased(evt);
            }
        });
        opacityPanel.add(opacityLevelSlider, java.awt.BorderLayout.CENTER);

        opacityPercentageLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        opacityPercentageLabel.setText("xx%");
        opacityPanel.add(opacityPercentageLabel, java.awt.BorderLayout.LINE_START);

        acceptOpacityButton.setText("Aceptar");
        acceptOpacityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptOpacityButtonActionPerformed(evt);
            }
        });
        opacityPanel.add(acceptOpacityButton, java.awt.BorderLayout.LINE_END);

        opacityFrame.getContentPane().add(opacityPanel, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JReloj");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setFocusable(false);
        setFocusableWindowState(false);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        appPanel.setBackground(new java.awt.Color(0, 0, 0));
        appPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hora Actual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 13), new java.awt.Color(255, 0, 0))); // NOI18N
        appPanel.setForeground(new java.awt.Color(1, 1, 1));
        appPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                appPanelMouseDragged(evt);
            }

            public void mouseMoved(java.awt.event.MouseEvent evt) {
                appPanelMouseMoved(evt);
            }
        });
        appPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                appPanelMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                appPanelMouseReleased(evt);
            }
        });
        appPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(255, 255, 0));
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setText("Fecha");
        appPanel.add(dateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 220, 30));

        closeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        closeLabel.setForeground(new java.awt.Color(255, 0, 0));
        closeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeLabel.setText("x");
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });
        appPanel.add(closeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 20, 20));

        osNameLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        osNameLabel.setForeground(new java.awt.Color(255, 255, 0));
        osNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        osNameLabel.setText("SO Huéped: " + System.getProperty("os.name") + " ");
        appPanel.add(osNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 220, 20));

        audioLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        audioLabel.setForeground(new java.awt.Color(255, 0, 0));
        audioLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        audioLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                audioLabelMouseClicked(evt);
            }
        });
        appPanel.add(audioLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 30, 30));

        hourLabel.setBackground(new java.awt.Color(0, 0, 0));
        hourLabel.setFont(new java.awt.Font("DejaVu Sans", 3, 38)); // NOI18N
        hourLabel.setForeground(new java.awt.Color(255, 255, 0));
        hourLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hourLabel.setText("11:11:11");
        appPanel.add(hourLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 240, 50));

        getContentPane().add(appPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 90));

        hourProgressBar.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        hourProgressBar.setMaximum(24);
        hourProgressBar.setToolTipText("Hora");
        hourProgressBar.setString("Hora");
        hourProgressBar.setStringPainted(true);
        getContentPane().add(hourProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 10, 90));

        secondProgressBar.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        secondProgressBar.setForeground(new java.awt.Color(0, 1, 0));
        secondProgressBar.setMaximum(59);
        secondProgressBar.setToolTipText("Segundo");
        secondProgressBar.setString("Segundo");
        secondProgressBar.setStringPainted(true);
        getContentPane().add(secondProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 260, 10));

        minuteProgressBar.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        minuteProgressBar.setMaximum(59);
        minuteProgressBar.setToolTipText("Minuto");
        minuteProgressBar.setString("Minuto");
        minuteProgressBar.setStringPainted(true);
        getContentPane().add(minuteProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 10, 90));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void appPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appPanelMouseDragged
        setCursor(Cursor.MOVE_CURSOR);
        setBounds(evt.getXOnScreen() - (int) point.getX() -
                        (hourProgressBar.getWidth()), evt.getYOnScreen() - (int) point.getY(),
                this.getWidth(), this.getHeight());
    }//GEN-LAST:event_appPanelMouseDragged

    private void appPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appPanelMousePressed
        point = evt.getPoint();
    }//GEN-LAST:event_appPanelMousePressed

    private void appPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appPanelMouseReleased
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_appPanelMouseReleased

    private void addReminderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReminderButtonActionPerformed
        String message = reminderMessageTextArea.getText().trim();
        String hour2;
        int hour, minute, second;

        try {
            hour = Integer.parseInt(hourReminderComboBox.getSelectedItem().toString());
            minute = Integer.parseInt(minuteReminderComboBox.getSelectedItem().toString());
            second = Integer.parseInt(secondsReminderComboBox.getSelectedItem().toString());

            if (hour < 0 || hour > 23) {
                Messages.errorMessage("Error en la Fecha. Ingrese una Hora correcta");
            } else if (minute < 0 || minute > 59) {
                Messages.errorMessage("Error en la Fecha. Ingrese un Minuto correcto");
            } else if (second < 0 || second > 59) {
                Messages.errorMessage("Error en la Fecha. Ingrese un Segundo correcto");
            } else {
                hour2 = hour + ":" + Hour.change(minute) + ":" + Hour.change(second);
                cleanReminderForm();
            }
        } catch (NumberFormatException e) {
            Messages.errorMessage("Error en la Fecha. Se aceptan solo numeros");
        }
    }//GEN-LAST:event_addReminderButtonActionPerformed

    private void stopAlarmSoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAlarmSoundButtonActionPerformed
        this.hourBeep.setState(false);
    }//GEN-LAST:event_stopAlarmSoundButtonActionPerformed

    private void appPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appPanelMouseMoved
        if ((evt.getX() > 210 && evt.getX() < 230) && (evt.getY() > 10 && evt.getY() < 30)) {
            closeLabel.setVisible(true);
        } else {
            closeLabel.setVisible(false);
        }
    }//GEN-LAST:event_appPanelMouseMoved

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeLabelMouseClicked

    private void opacityLevelSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opacityLevelSliderMouseDragged
        setOpacityPercentage((float) opacityLevelSlider.getValue());
    }//GEN-LAST:event_opacityLevelSliderMouseDragged

    private void opacityLevelSliderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opacityLevelSliderMousePressed
        setOpacityPercentage((float) opacityLevelSlider.getValue());
    }//GEN-LAST:event_opacityLevelSliderMousePressed

    private void opacityLevelSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_opacityLevelSliderKeyReleased
        setOpacityPercentage((float) opacityLevelSlider.getValue());
    }//GEN-LAST:event_opacityLevelSliderKeyReleased

    private void acceptOpacityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptOpacityButtonActionPerformed
        opacityFrame.setVisible(false);
    }//GEN-LAST:event_acceptOpacityButtonActionPerformed

    private void applyColorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyColorsButtonActionPerformed
        for (K.Component component : components) {
            setColor(component);
        }
    }//GEN-LAST:event_applyColorsButtonActionPerformed

    private void windowTitleColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowTitleColorRadioActionPerformed
        addComponentToList(windowTitleColorRadio, K.Component.WINDOW_TITLE);
    }//GEN-LAST:event_windowTitleColorRadioActionPerformed

    private void backgroundColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorRadioActionPerformed
        addComponentToList(backgroundColorRadio, K.Component.BACKGROUND);
    }//GEN-LAST:event_backgroundColorRadioActionPerformed

    private void hourColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourColorRadioActionPerformed
        addComponentToList(hourColorRadio, K.Component.HOUR);
    }//GEN-LAST:event_hourColorRadioActionPerformed

    private void dateColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateColorRadioActionPerformed
        addComponentToList(dateColorRadio, K.Component.DATE);
    }//GEN-LAST:event_dateColorRadioActionPerformed

    private void backgroundHourBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundHourBarColorRadioActionPerformed
        addComponentToList(backgroundHourBarColorRadio, K.Component.HOUR_BAR_BACKGROUND);
    }//GEN-LAST:event_backgroundHourBarColorRadioActionPerformed

    private void backgroundMinuteBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundMinuteBarColorRadioActionPerformed
        addComponentToList(backgroundMinuteBarColorRadio, K.Component.MINUTE_BAR_BACKGROUND);
    }//GEN-LAST:event_backgroundMinuteBarColorRadioActionPerformed

    private void backgroundSecondBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSecondBarColorRadioActionPerformed
        addComponentToList(backgroundSecondBarColorRadio, K.Component.SECOND_BAR_BACKGROUND);
    }//GEN-LAST:event_backgroundSecondBarColorRadioActionPerformed

    private void hourBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourBarColorRadioActionPerformed
        addComponentToList(hourBarColorRadio, K.Component.HOUR_BAR);
    }//GEN-LAST:event_hourBarColorRadioActionPerformed

    private void minuteBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minuteBarColorRadioActionPerformed
        addComponentToList(minuteBarColorRadio, K.Component.MINUTE_BAR);
    }//GEN-LAST:event_minuteBarColorRadioActionPerformed

    private void secondBarColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondBarColorRadioActionPerformed
        addComponentToList(secondBarColorRadio, K.Component.SECOND_BAR);
    }//GEN-LAST:event_secondBarColorRadioActionPerformed

    private void osNameColorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_osNameColorRadioActionPerformed
        addComponentToList(osNameColorRadio, K.Component.GUEST_ONLY_TITLE);
    }//GEN-LAST:event_osNameColorRadioActionPerformed

    private void uncheckAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uncheckAllButtonActionPerformed
        windowTitleColorRadio.setSelected(false);
        backgroundColorRadio.setSelected(false);
        hourColorRadio.setSelected(false);
        dateColorRadio.setSelected(false);
        backgroundHourBarColorRadio.setSelected(false);
        backgroundMinuteBarColorRadio.setSelected(false);
        backgroundSecondBarColorRadio.setSelected(false);
        hourBarColorRadio.setSelected(false);
        minuteBarColorRadio.setSelected(false);
        secondBarColorRadio.setSelected(false);
        osNameColorRadio.setSelected(false);
        components.clear();
    }//GEN-LAST:event_uncheckAllButtonActionPerformed

    private void audioLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_audioLabelMouseClicked
        new Thread(() -> {
            try {
                // Obtén un InputStream del recurso de audio
                InputStream inputStream = AudioHour.class.getResourceAsStream(AudioHour.AUDIOS_PATH + "Button54.wav");

                // Crea una instancia de AudioFile utilizando el InputStream
                AudioFile audioFile = new AudioFile(inputStream);

                // Reproduce el audio en un hilo
                audioFile.play(true);

                // Espera hasta que el hilo de audio termine
                try {
                    Thread.sleep(audioFile.getMilliseconds());
                } catch (InterruptedException interruptedException) {
                    interruptedException.printStackTrace();
                }

                final Player player = AudioHour.playHour();

                // Espera hasta que el hilo de audio termine
                try {
                    Thread.sleep(player.getMilliseconds() + 100);
                } catch (InterruptedException interruptedException) {
                    interruptedException.printStackTrace();
                }

                // Obtén un InputStream del recurso de audio
                inputStream = AudioHour.class.getResourceAsStream(AudioHour.AUDIOS_PATH + "Button54.wav");

                // Crea una instancia de AudioFile utilizando el InputStream
                audioFile = new AudioFile(inputStream);

                // Reproduce el audio en un hilo
                audioFile.play(true);
            } catch (LineUnavailableException | IOException | UnsupportedAudioFileException exception) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, exception);
            }
        }).start();
    }//GEN-LAST:event_audioLabelMouseClicked

    public static void main(String args[]) {
        if (System.getProperty("os.name").contains("Windows")) {
            try {
                setLookAndFeel(getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                     UnsupportedLookAndFeelException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        invokeLater(() -> new App().setVisible(true));
    }

    private void cleanReminderForm() {
        hourReminderComboBox.setSelectedItem(Hour.getCalendar());
        minuteReminderComboBox.setSelectedItem(Hour.getMinute());
        secondsReminderComboBox.setSelectedItem(Hour.getSecond());
        reminderMessageTextArea.setText("");
    }

    private void setOpacityPercentage(float porcentaje) {
        opacityPercentageLabel.setText(String.valueOf((int) porcentaje) + "%");
    }

    private void setColor(K.Component componente) {
        switch (componente) {
            case WINDOW_TITLE: {
                appPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hora Actual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), colorChooser.getColor())); // NOI18N
//                ar_color.actualizarCampo("titulo", selector.getColor());
                break;
            }
            case BACKGROUND: {
                setBackground(appPanel, "fondo");
                break;
            }
            case HOUR: {
                setForegorund(hourLabel, "hora");
                break;
            }
            case DATE: {
                setForegorund(dateLabel, "fecha");
                break;
            }
            case HOUR_BAR_BACKGROUND: {
                setBackground(hourProgressBar, "horaBack");
                break;
            }
            case MINUTE_BAR_BACKGROUND: {
                setBackground(minuteProgressBar, "minutoBack");
                break;
            }
            case SECOND_BAR_BACKGROUND: {
                setBackground(secondProgressBar, "segundoBack");
                break;
            }
            case HOUR_BAR: {
                setForegorund(hourProgressBar, "horaFront");
                break;
            }
            case MINUTE_BAR: {
                setForegorund(minuteProgressBar, "minutoFront");
                break;
            }
            case SECOND_BAR: {
                setForegorund(secondProgressBar, "segundoFront");
                break;
            }
            case GUEST_ONLY_TITLE: {
                setForegorund(osNameLabel, "sistemaOperativo");
                break;
            }
        }
    }

    private void initThreads() {
        hourThread.start();
        hourBeep.start();
    }

    private void initGuiComponents() {
        setLocationRelativeTo(null);

        Resize.resize(themeForm, false, "Cambio de Color");
        Resize.resize(reminderFrame, true, "Agregar Recordatorio");
        Resize.resize(logFrame, true, "Mensajes de Recordatorio");

        logFrame.setBounds(0, 0, 400, 500);
        logFrame.setLocationRelativeTo(null);

        themeForm.setBounds(0, 0, (int) themeForm.getPreferredSize().getWidth() + 5, (int) themeForm.getPreferredSize().getHeight() + 30);
        themeForm.setLocationRelativeTo(null);
        setAlwaysOnTop(true);

        closeLabel.setVisible(false);
        hourProgressBar.setBorderPainted(false);
        minuteProgressBar.setBorderPainted(false);
        secondProgressBar.setBorderPainted(false);

        minuteProgressBar.setOrientation(SwingConstants.VERTICAL);
        hourProgressBar.setOrientation(SwingConstants.VERTICAL);
        appSystemtray = new AppSystemtray();
        audioLabel.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/megaphone.png"))));
    }

    private class HourThread extends Thread {

        @Override
        public void run() {
            while (true) {
                hourLabel.setText(Hour.getCurrentHour());
                hourProgressBar.setValue(Integer.parseInt(Hour.getCalendar()));
                minuteProgressBar.setValue(Integer.parseInt(Hour.getMinute()));
                secondProgressBar.setValue(Integer.parseInt(Hour.getSecond()));

                hourProgressBar.setString("Hora (" + Math.round(hourProgressBar.getPercentComplete() * 100) + "%)");
                minuteProgressBar.setString("Minuto (" + Math.round(minuteProgressBar.getPercentComplete() * 100) + "%)");
                secondProgressBar.setString("Segundo (" + Math.round(secondProgressBar.getPercentComplete() * 100) + "%)");

                dateLabel.setText(DateUtil.getFormattedDate());

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException interruptedException) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, interruptedException);
                }
            }
        }
    }


    private class HourBeep extends Thread {

        private boolean state = false;

        @Override
        public void run() {
            while (true) {
                if (state) {
                    Toolkit.getDefaultToolkit().beep();
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void setState(boolean state) {
            this.state = state;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptOpacityButton;
    private javax.swing.JButton addReminderButton;
    private javax.swing.JPanel appPanel;
    private javax.swing.JButton applyColorsButton;
    private javax.swing.JLabel audioLabel;
    private javax.swing.JLabel backgroundColorLabel;
    private javax.swing.JRadioButton backgroundColorRadio;
    private javax.swing.JLabel backgroundHourBarColorLabel;
    private javax.swing.JRadioButton backgroundHourBarColorRadio;
    private javax.swing.JLabel backgroundMinuteBarColorLabel;
    private javax.swing.JRadioButton backgroundMinuteBarColorRadio;
    private javax.swing.JLabel backgroundSecondBarColorLabel;
    private javax.swing.JRadioButton backgroundSecondBarColorRadio;
    private javax.swing.JPanel changeColorsPanel;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JPanel colorChooserPanel;
    private javax.swing.JLabel currentColor;
    private javax.swing.JRadioButton dateColorRadio;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabelColorLabel;
    private javax.swing.JPanel datetimeReminderPanel;
    private javax.swing.JRadioButton hourBarColorRadio;
    private javax.swing.JLabel hourBarLabelColorLabel;
    private javax.swing.JRadioButton hourColorRadio;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JLabel hourLabelColorLabel;
    private javax.swing.JProgressBar hourProgressBar;
    private javax.swing.JComboBox hourReminderComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JFrame logFrame;
    private javax.swing.JScrollPane logMessageScrollPane;
    private javax.swing.JTextArea logMessageTextArea;
    private javax.swing.JLabel minuteBarColorLabel;
    private javax.swing.JRadioButton minuteBarColorRadio;
    private javax.swing.JProgressBar minuteProgressBar;
    private javax.swing.JComboBox minuteReminderComboBox;
    private javax.swing.JFrame opacityFrame;
    private javax.swing.JSlider opacityLevelSlider;
    private javax.swing.JPanel opacityPanel;
    private javax.swing.JLabel opacityPercentageLabel;
    private javax.swing.JLabel osNameColorLabel;
    private javax.swing.JRadioButton osNameColorRadio;
    private javax.swing.JLabel osNameLabel;
    private javax.swing.JFrame reminderFrame;
    private javax.swing.JPanel reminderMessagePanel;
    private javax.swing.JScrollPane reminderMessageScrollPane;
    private javax.swing.JTextArea reminderMessageTextArea;
    private javax.swing.JLabel secondBarColorLabel;
    private javax.swing.JRadioButton secondBarColorRadio;
    private javax.swing.JProgressBar secondProgressBar;
    private javax.swing.JComboBox secondsReminderComboBox;
    private javax.swing.JButton stopAlarmSoundButton;
    private javax.swing.JFrame themeForm;
    private javax.swing.JButton uncheckAllButton;
    private javax.swing.JLabel windowTitleColorLabel;
    private javax.swing.JRadioButton windowTitleColorRadio;
    // End of variables declaration//GEN-END:variables

    private void setBackground(Component component, String id) {
        component.setBackground(colorChooser.getColor());
    }

    private void setForegorund(Component component, String id) {
        component.setForeground(colorChooser.getColor());
    }

    private class AppSystemtray {

        private final String TITLE = "JReloj";
        private TrayIcon trayicon;
        private SystemTray tray;
        private Image icon;
        private PopupMenu popupMenu;

        public AppSystemtray() {
            if (SystemTray.isSupported()) {
                tray = SystemTray.getSystemTray();
                popupMenu = new PopupMenu();

                MenuItem changeThemeMenuItem = new MenuItem("Cambiar Tema");
                MenuItem defaultThemeMenuItem = new MenuItem("Cargar Tema Predeterminado");
                MenuItem reminderMenuItem = new MenuItem("Recordatorio");
                MenuItem turnOffAlarmMenuItem = new MenuItem("Apagar Sonido Alarma");
                MenuItem showRemindersMenuItem = new MenuItem("Mostrar Recordatorios");
                MenuItem setCurrentThemeToDefaultMenuItem = new MenuItem("Dejar tema actual como Predeterminado");
                MenuItem closeMenuItem = new MenuItem("Cerrar Reloj");
                MenuItem opacityMenuItem = new MenuItem("Nivel de Opacidad");
                MenuItem preferencesMenuItem = new MenuItem("Preferencias");

                preferencesMenuItem.addActionListener((ActionEvent e) -> {
                    System.out.println("Preferencias");
                });

                opacityMenuItem.addActionListener((ActionEvent arg0) -> {
                    Resize.resize(opacityFrame, true, "Nivel de Opacidad");
                    opacityFrame.setVisible(true);
                });

                turnOffAlarmMenuItem.addActionListener((ActionEvent arg0) -> {
                    hourBeep.setState(false);
                });

                reminderMenuItem.addActionListener((ActionEvent arg0) -> {
                    hourReminderComboBox.setSelectedItem(Hour.getCalendar());
                    minuteReminderComboBox.setSelectedItem(Hour.getMinute());
                    secondsReminderComboBox.setSelectedItem(Hour.getSecond());

                    reminderFrame.setVisible(true);
                });

                changeThemeMenuItem.addActionListener((ActionEvent arg0) -> {
                    themeForm.setVisible(true);
                });

                closeMenuItem.addActionListener((ActionEvent arg0) -> {
                    System.exit(0);
                });

                popupMenu.add(opacityMenuItem);
                popupMenu.addSeparator();
                popupMenu.add(changeThemeMenuItem);
                popupMenu.add(defaultThemeMenuItem);
                popupMenu.add(setCurrentThemeToDefaultMenuItem);
                popupMenu.addSeparator();
                popupMenu.add(reminderMenuItem);
                popupMenu.add(showRemindersMenuItem);
                popupMenu.add(turnOffAlarmMenuItem);
                popupMenu.addSeparator();
                popupMenu.add(preferencesMenuItem);
                popupMenu.addSeparator();
                popupMenu.add(closeMenuItem);

                icon = new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/trayIcon.png"))).getImage();
                trayicon = new TrayIcon(icon, TITLE, popupMenu);
                trayicon.setImageAutoSize(true);

                try {
                    tray.add(trayicon);
                } catch (AWTException awtException) {
                    System.out.println(awtException.getStackTrace());
                }
            }
        }
    }

    private void addComponentToList(JRadioButton radioButton, K.Component constant) {
        if (radioButton.isSelected()) {
            components.add(constant);
        } else {
            components.remove(components.indexOf(constant));
        }
    }
}
